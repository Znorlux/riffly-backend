// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  AFICIONADO
  PROFESIONAL
  PRODUCTOR
  COMPOSITOR
}

enum TrackGenre {
  POP
  ROCK
  ELECTRONIC
  HIP_HOP
  JAZZ
  CLASSICAL
  FOLK
  REGGAETON
  BLUES
  COUNTRY
}

enum TrackMood {
  ALEGRE
  MELANCOLICO
  ENERGETICO
  RELAJANTE
  ROMANTICO
  NOSTALGICO
  MOTIVACIONAL
  MISTERIOSO
  EPICO
  INTIMO
  FESTIVO
  CONTEMPLATIVO
}

enum TempoRange {
  VERY_SLOW    // 60-70 BPM
  SLOW         // 70-90 BPM
  MODERATE     // 90-120 BPM
  FAST         // 120-140 BPM
  VERY_FAST    // 140+ BPM
}

enum GenerationMethod {
  PROMPT       // Descripción de texto
  MELODY       // Tararear melodía
  LYRICS       // Solo letras
  STYLE        // Imitación de estilo
}

model User {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String    @unique
  username      String    @unique
  passwordHash  String
  profileImage  String?
  bio           String?
  role          UserRole  @default(AFICIONADO)
  
  // Relaciones
  tracks        Track[]
  comments      Comment[]
  likes         Like[]
  followers     Follow[]   @relation("following")
  following     Follow[]   @relation("follower")
  playlists     Playlist[]
}

model Track {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Información básica
  title             String
  description       String?
  
  // URLs de archivos
  audioUrl          String
  coverImage        String?           // URL de imagen de portada puesta por el usuario
  spectrogramUrl    String?           // URL específica del espectrograma
  
  // Metadatos musicales
  genre             TrackGenre
  mood              TrackMood
  tempo             TempoRange
  duration          Int               // duración en segundos
  
  // Configuración de visibilidad
  isPublic          Boolean           @default(true)
  allowCollaborations Boolean         @default(false)
  
  // Datos de generación por IA
  aiGenerated       Boolean           @default(false)
  generationMethod  GenerationMethod?
  aiPrompt          String?           // prompt completo usado para generar
  originalPrompt    String?           // prompt original del usuario
  
  // Instrumentos destacados (como array de strings)
  mainInstruments       String[]          @default([])
  
  // Letras si las hay
  lyrics            String?
  
  // IDs externos para tracking
  riffusionId       String?           // ID de la API de Riffusion
  generationId      String?           // ID único de la sesión de generación
  
  // Metadatos adicionales de generación
  generationTime    Int?              // tiempo de generación en ms
  fileSize          BigInt?           // tamaño total de archivos en bytes
  
  // Relaciones
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments          Comment[]
  likes             Like[]
  playlistTracks    PlaylistTrack[]
  
  @@index([userId])
  @@index([genre])
  @@index([mood])
  @@index([isPublic])
  @@index([aiGenerated])
}

model Comment {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  content       String
  
  // Relaciones
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  trackId       String
  track         Track     @relation(fields: [trackId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([trackId])
}

model Like {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  
  // Relaciones
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  trackId       String
  track         Track     @relation(fields: [trackId], references: [id], onDelete: Cascade)
  
  @@unique([userId, trackId])
  @@index([userId])
  @@index([trackId])
}

model Follow {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  
  // Relaciones
  followerId    String
  follower      User      @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId   String
  following     User      @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// Una Playlist es una colección sencilla de pistas creada por un usuario
model Playlist {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  title         String
  description   String?
  coverImage    String?
  isPublic      Boolean   @default(true)
  
  // Relaciones
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tracks        PlaylistTrack[]
  
  @@index([userId])
}

// Tabla de relación entre Playlist y Track para manejar el orden de las pistas
model PlaylistTrack {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  position      Int       // Posición de la pista en la playlist
  
  // Relaciones
  playlistId    String
  playlist      Playlist  @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  trackId       String
  track         Track     @relation(fields: [trackId], references: [id], onDelete: Cascade)
  
  @@unique([playlistId, trackId])
  @@index([playlistId])
  @@index([trackId])
}
